For poster
1) performance: parallelization vs combination
2) demo: synthesize, counterexample, highlight
3) compare with rishabh's tool (when his doesn't work)

cuong:
- range(l) => range(len(l)) - DONE, still got issue about the rosette fail
  because of unrunable code.
- 2 cores: 1) mixer 2) sequential with priority - DONE

- # of symbolic variables = # of holes
- add generic mutator - There, not tested yet

mangpo:
- fix bug
- get some performance number: parallel vs mixer

- return in loop, break

======================================
EXAMPLE for synthesis
hw1-2, hw2-1, hw2-2 (tweak)
hw1-4 (hailstone)
rishabh-list
http://sketch1.csail.mit.edu/python-autofeedback/new-encoding/


======================================
ComputeDeriv
1: ok
2: base case
3: list comprehension
4: base case
EvaluatePoly
1: no return, break
2: ok
3: ok
4: ok
OddTuples
1: ok with range(l) => range(len(l))
2: ok
MultIA
1: ok
2: base case, add statement

======================================
multIA
3 mutators mixer (slow)
(set! result (either _c3  (* result m) (* result m) (+ result (v? _v0) ) (- result (v? _v0) ) (* result (v? _v0) ) (quotient result (v? _v0) ))

4 mutators mixer (fast)
(set! result (either _c3  (* result m) (* result m) (+ result (v? _v0) ) (- result (v? _v0) ) (* result (v? _v0) ) (quotient result (v? _v0) ) (* result m))

======================================
- result of bug localization
  = min unsat vs maxsat
  = # clause of correction set
  = runtime?
  = discussion of other techniques
- evaluation
  = # of search space not just # of candidate fixes
  = # of symbolic inputs
  = reorder priority order -> see the effect

